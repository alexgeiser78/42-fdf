GitHub ailopez-o, titouanck, chevrier titouan 
Matrices de rotation wikipedia
Deplacer le centre de rotation au centre de la forme 

Leaks \'97atExit \'97./fdf\
Flag de compilation : -lmlx -framework OpendGL -framework AppKit
gcc -L ./minilibx_macos main.c -lmlx -framework OpenGL -framework AppKit
mlx_pixel_put is very slow and doesn\'92t wait for the whole image to print in one fois
La division par 8 est un moyen de caler les bits en octet\

Deroulement:
main         												main.c			if argv ok, and open ok, then fdf_creator
     |-> ft_exit											error.c
    |-> open
    |-> ft_exit_no_file										error.c
	     fdf_creator										main.c	
                    |->       fdf_init						main.c			initialisation de certain arguments
 		  |->       mlx_init   								minilibx		initialisation de la connection au serveur
                    |->       fdf_fileoperations           	filopmapsize.c	traitement de la file de la map
                                     |->     fdf_set_mapsizefilopmapsize.c	mesure de la taille de la map
                                                        |-> gnl				gnl	stocke dans un pointeur, une ligne apres l'autre
 						    |-> fdf_set_mapsize_width     	filopmapsize.c	calcul de la largeur de la map en comptant le nombre de points
							        						    |-> free
 				  |->     ft_exit							error.c
                                     |->     mlx_new_image                  minilibx	stores a new image in memory
 				  |->     mlx_get_data_addr 				minilibx		param, bpp, image length, image endian les 3 passage par reference
 				  |->     ft_exit							error.c
 				  |->     fdf_fileoperations2				filopmapsize.c
     						    |-> open
 						    |->ft_exit						error.c
 						    |-> fdf_generate_map       		map.c.      	callocs des axes x et y dans le double pointeur **map
							       	|-> ft_calloc
								|-> fdf_free_map			fdf_free_all.c
 								|-> fdf_map_fill_z 			map.c           stock la valeur de z dans le param z
									|-> gnl
									|-> fdf_atoi_color		fdf_atoi.c      atoi standard
										|->fdf_atoi_getcolorfdf_atoi_get_color.c. permet de gerer les maps qui ont deja un code couleur en hexadec pour transformer cette couleur en int
									|-> free
								|-> fdf_findrange			fdf_findrange.c si la diff est de 0 on a met a 1
									   |-> fdf_findrangee	fdf_findrange.c rempli le champ max et min avec les valeurs z et range, la diff entre les deux
					             |-> close\
						     |-> ft_exit					error.c
		   |-> mlx_new_window								minilibx              taille de la fenetre a ouvrir 
		   |-> fdf_colorgradient							fdf_colorgradient.c   choix de gamme de couleur
				|-> fdf_colorgradient1						fdf_colorgradient.c   blanc-bleu
				|-> fdf_colorgradient2						fdf_colorgradient.c   jaune-rouge
				|-> fdf_colorgradient3						fdf_colorgradient.c   bleu-violet
				|-> fdf_colorgradient4						fdf_colorgradient.c   jaune-violet
		   |-> fdf_free_all									fdf_free_all.c
				|-> mlx_destroy_window						minilibx              free the window
				|-> mlx_destroy_image						minilibx              free the image
				|-> fdf_free_map							fdf_free_all.c        free the malloc form the map
		   |-> ft_exit										error.c
		   |-> fdf_colormap									fdf_colormap.c        here we put the value color which is calculated by colorgradient indice
				|-> ft_exit									error.c
				|-> fdf_colorgradient_indice				fdf_colormap.c        need a printf to understand
		   |-> fdf_default									fdf_default.c         devolved to scale arg which is hypotenuse of FDF_WIDTH or HEIGTH / hyp(height and width)\cb1 \
				|-> fdf_map_to_screen						fdf_map_to_screen.c   functions dispatcher Partie de reprint lors d'un evenemen
						|-> fdf_map_fill					fdf_map_fill.c        calcul du radian de deg et iy
								|-> fdf_map_rotation		fdf_map_fill.c        rotation changer
								|-> fdf_map_relief			fdf_map_fill.c        relief changer
						|-> fdf_fill_img					fdf_fill_img.c        condition pour dessiner l'image
							|-> fdf_put_pixel				fdf_put_pixel.c       trie l'ordre du RGB ou BGR en fonction de l'ENDIAN
								|-> rrgb					fdf_color.c           filtre a bit pour n'avoir que des valeurs entre 0 et 255
							|-> fdf_bresenham				fdf_bresenham.c       calcul de ratio en fonction de base et current
								|-> fdf_bresenham_if		fdf_bresenham_if.c    calcul des valeurs filtrees en 0-255 pour current et base
									|-> rrgb				fdf_color.c           filtre a bit pour 0-255 
									|-> fdf_bresenham_if_while	fdf_bresenham_if.c change la valeur color en se servant de la fonction suivante
										|->fdf_bresenham_if_while_color	fdf_bresenham_if.c  grace a la function rgb on arrive a donner une valeur en 3 x 256
												|-> rgb	fdf_color.c               permet de donner un valeur en 255255255
										|->fdf_call_put_pixel	fdf_bresenham.c   simple appel de la fonction put pixel
                                                       |-> fdf_put_pixel          fdf_put_pixel.c  rapport a nouveau a l'endian
								|-> fdf_bresenham_else	fdf_bresenham_else.c.     tout a fait similar a if
									|-> rrgb			fdf_color.c               filtre a bit
									|-> fdf_bresenham_else_while  fdf_bresenham_else.c   tout a fait similar a if 
										|->fdf_bresenham_else_while_color     fdf_bresenham_else.c    tout a fait similaire a if
												|-> rgb	fdf_color.c          
										|-> fdf_call_put_pixel	fdf_put_pixel.c appel de la function put pixel
         											|-> fdf_put_pixel fdf_put_pixel.c  rapport a l'endian
						|->fdf_colorset_screen			fdf_map_to_screen.c  petit check de valeur
								|-> fdf_put_pixel		fdf_put_pixel.c      encore un parce qu'il faut pas se restreindre
								|-> mlx_put_image_to_window	minilibx         draw the image stored with mlx_new_image into window
          |->mlx_hook										minilibx         event listener
                   |->fdf_keypressed    					fdf_kezpressed.c
          |->mlx_hook
                   |->fdf_quit								fdf_quit.c
          |->mlx_mouse_hook                                                                                                minilibx\
                   |->fdf_mouseclick						fdf_mouseclick.c
          |-> mlx_loop										minilibx         permet d'attendre des evenements
    |-> close

How things works:

-args check
-open file
-check open file
-t_mlx data created
-args of struct data initialized
-connection to server
-get next line
-count number of columns
-count number of lines
-free gnl
-storing the image to draw later
-address where the image is stored
-open file
-calloc creating for x axe
-calloc creating for y axe
-get next line
-z axe in struct
-max and min height val set
-range (max - min) set
-open window
-gradient tabs creating
-chose which color in the tab to use
-t_mlx dt created with pasted data from *data
-scale using hyp
-init 45 deg rotation right
-init 80 deg incl sur l'axe y
-init position of image centered
-calc of relief, scale of z axis

modified part when an event is done

-calc deg_sin, deg_cos, iy_sin, iy_cos with rad
-calc of the center of rotation
-t_point current created with map[x][y] from data
-calculating every points regarding scale, origin, translate for rotation function
-calculating the y value related to the inclination for incl function
-t_point current created with map[x][y] from data
-t_color tcolor created
-check the pointer to the memory where the pixel color information is stored
-reverse rgb on endian 0 = pix 0 blue, pix 1 green, pix2 red, pix 3 alpha
-diff between current and base x and y
-calc the ratio  yrange / xrange and dispatch between if and else
-t_bresenham vr created
-dispatch to if or else regarding the range
-init the vr struct bcol, ccol, diff, current, ratio, i
-bresenham algo to determinate which pixel has to be printed
-calc the vr.current.color using rgb(rgb)
-rrgb to modify pixel +0 +1 +2 +3
-calc the gradient small screen only if screen is big enough, 255px x 25px
-print in the window, the image calculated

Fixed value:
FDF_WIDTH: 1920
FDF_HEIGHT: 1080

RAD: 57.2958

KV_ESCAPE 65307						(else)		
KV_ESCAPE_M 53    			quit  	(MAC)

KV_SPACE 32 				
KV_SPACE_M 49				vue de dessus

KV_PLUS 61    
KV_PLUS_M 24				relief
KV_MINUS 45  
KV_MINUS_M 27				

KV_PLUS2 65451	
KV_MINUS2 65453				for other than OSX

KV_R 114
KV_R_M 15					reset view

KV_P 112
KV_P_M 35                   profile
\
KV_W 119
KV_W_M 13					translate up
KV_A 97
KV_A_M 0					translate left
KV_S 115
KV_S_M						tranlate down
KV_D 100
KV_D_M 2					tranlate right

KV_C 99
KV_C_M 8					change gradient

KV_LEFTARROW 65361
KV_LEFTARROW_M 123			left rotate
KV_RIGHTARROW 65363
KV_RIGHTARROW_M 124			right rotate
KV_TOPARROW 65362
KV_TOPARROW_M  126			top rotate
KV_BOTTOMARROW 65364
KV_BOTTOMARROW_M 125		bottom rotate

/* Same on linux and macos */

KV_SCROLLUP 4				zoom in
KV_SCROLLDOWN 5
KV_SCROLLLEFT 7				zoom out
KV_SCROLLRIGHT 6

KV_SCROLLBUTTON 2

KV_LEFTCLICK 1
KV_RIGHTCLICK 3
